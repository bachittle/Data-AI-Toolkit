# claude_concat.py
# ---
# takes in a directory structure generated by dir_scanner.py
# and concatenates all the files into one folder with transformed filenames

import sys
import json
import os

def transform_path(parent_dir, filepath):
    # If it's the root directory file, just return the filename
    if '/' not in filepath and '\\' not in filepath:
        return filepath
        
    # Replace .\\ with nothing and \\ with \@
    filepath = filepath.replace('.\\', '')
    filepath = filepath.replace('\\', '@')
        
    # Otherwise, replace slashes with @ but skip the parent dir
    return filepath.replace('/', '@')

def validate_json(dir_data):
    if not isinstance(dir_data, dict):
        print("Error: Invalid JSON format. Expected a dictionary.")
        return False
    
    for k, v in dir_data.items():
        if not isinstance(v, dict):
            print(f"Error: Invalid JSON format for directory: {k}")
            return False
        
        if not ("dirs" in v and "files" in v):
            print(f"Error: Missing 'dirs' or 'files' keys in directory: {k}")
            return False
    
    return True

def concat_dir_data(dir_data, output_dir):
    created_files = []
    
    # Get the parent directory (first key in the JSON)
    parent_dir = next(iter(dir_data.keys()))
    
    for base_dir, content in dir_data.items():
        for filepath in content["files"]:
            full_path = os.path.join(base_dir, filepath)
            # Get path relative to parent directory and transform
            relative_path = os.path.relpath(full_path, parent_dir)
            transformed_name = transform_path(parent_dir, relative_path)
            output_path = os.path.join(output_dir, transformed_name)
            
            print(f"Processing: {full_path} -> {transformed_name}")
            
            try:
                with open(full_path, "r") as f:
                    file_content = f.read()
                    
                with open(output_path, "w") as out_f:
                    out_f.write(file_content)
                    created_files.append(transformed_name)
                    
            except Exception as e:
                print(f"Error processing {full_path}: {e}")
                continue
    
    return created_files

def main():
    if len(sys.argv) < 3:
        print("Usage: python claude_concat.py <json_file> <output_directory>")
        sys.exit(1)

    json_file_path = sys.argv[1]
    output_dir = sys.argv[2]

    # Confirm output directory with user
    if os.path.exists(output_dir):
        confirm = input(f"Output directory '{output_dir}' already exists. Delete and continue? (y/N): ")
        if confirm.lower() != 'y':
            print("Operation cancelled.")
            sys.exit(0)
        
        # Remove existing output directory
        try:
            import shutil
            shutil.rmtree(output_dir)
        except Exception as e:
            print(f"Error removing directory {output_dir}: {e}")
            sys.exit(1)

    # Create fresh output directory
    os.makedirs(output_dir, exist_ok=True)

    with open(json_file_path, 'r') as json_file:
        dir_data = json.load(json_file)
        if not validate_json(dir_data):
            sys.exit(1)
        
        print("JSON is valid. Processing files...")
        created_files = concat_dir_data(dir_data, output_dir)
        
        print("\nCreated files:")
        for f in created_files:
            print(f"- {f}")

if __name__ == "__main__":
    main()